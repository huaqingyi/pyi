{"version":3,"sources":["swagger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,mDAAwD;AAExD,gEAAyC;AACzC,kEAAuC;AACvC,4DAAkC;AAClC,wDAA8B;AAkC9B;IAAA;IAuBA,CAAC;IAtBiB,aAAK,GAAnB,UACI,IAAY,EACZ,GAAQ,EACR,UAA8B,EAC9B,IAAsC,EACtC,OAAwB,EACxB,SAAiC,EACjC,aAAqC,EACrC,UAAkC,EAClC,gBAAwC;QAExC,IAAM,MAAM,GAAG,qCAAoB,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC;QACvD,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,IAAI,UAAU,EAAE;YACZ,WAAW,GAAG,uBAAY,CAAC,UAAiB,CAAC,CAAC;SACjD;QACD,GAAG,CAAC,GAAG,CAAC,wBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,4BAA4B;QACtD,GAAG,CAAC,GAAG,CAAC,qBAAO,CAAC,mBAAK,CAAC,IAAI,EAAE,wBAAS,CAAC,KAAK,uBAClC,MAAM,GAAK,WAAW,GAC3B,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,UAAU,EAAE,gBAAgB,CACxE,CAAC,CAAC,CAAC,CAAC;IACT,CAAC;IACL,cAAC;AAAD,CAvBA,AAuBC,IAAA;AAvBY,0BAAO","file":"../swagger.js","sourcesContent":["import { SwaggerInjectService } from './swagger.object';\nimport Koa from 'koa';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-koa';\nimport convert from 'koa-convert';\nimport mount from 'koa-mount';\n\n//with jsdoc\n// const options = {\n//     swaggerDefinition: {\n//       info: {\n//         title: 'API', // Title (required)\n//         version: '2.0.0', // Version (required)\n//       },\n//     },\n//     apis: [\n//       './src/module/swagger/swagger.yaml',\n//       './src/routes/*.js', // Path to the API docs from root\n//       './src/module/swagger/parameters.yaml'\n//     ],\n//   };\n/**\n * 参数\n */\nexport interface SwaggerOption {\n    [x: string]: any;\n    swaggerDefinition?: {\n        info?: {\n            title?: string, // Title (required)\n            version?: string, // Version (required)\n        },\n    },\n    apis?: string[],\n}\n\ninterface JsonObject extends SwaggerOption { [key: string]: any; }\ninterface SwaggerUiOptions { [key: string]: any; }\ninterface SwaggerOptions { [key: string]: any; }\n\nexport class Swagger {\n    public static build(\n        path: string,\n        app: Koa,\n        swaggerDoc?: JsonObject | null,\n        opts?: SwaggerUiOptions | false | null,\n        options?: SwaggerOptions,\n        customCss?: string | false | null,\n        customfavIcon?: string | false | null,\n        swaggerUrl?: string | false | null,\n        customeSiteTitle?: string | false | null\n    ) {\n        const config = SwaggerInjectService.runtime().toJSON();\n        let swaggerSpec = {};\n        if (swaggerDoc) {\n            swaggerSpec = swaggerJSDoc(swaggerDoc as any);\n        }\n        app.use(swaggerUi.serve); //serve swagger static files\n        app.use(convert(mount(path, swaggerUi.setup(\n            { ...config, ...swaggerSpec },\n            opts, options, customCss, customfavIcon, swaggerUrl, customeSiteTitle\n        ))));\n    }\n}"]}