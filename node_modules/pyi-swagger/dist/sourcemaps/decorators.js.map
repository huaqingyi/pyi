{"version":3,"sources":["decorators.ts"],"names":[],"mappings":"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","file":"../decorators.js","sourcesContent":["import _ from 'ramda';\nimport is from 'is-type-of';\nimport { SwaggerInjectService } from './swagger.object';\n\nconst _desc = (type: string, text: string | any[]) => (target: any, name: string, descriptor: PropertyDescriptor) => {\n    descriptor.value[type] = text;\n    SwaggerInjectService.runtime().add(target, name, { [type]: text });\n    return descriptor;\n};\n\nconst _params = (type: string, parameters: { [name: string]: any }) => (target: any, name: string, descriptor: PropertyDescriptor) => {\n    if (!descriptor.value.parameters) descriptor.value.parameters = {};\n    descriptor.value.parameters[type] = parameters;\n\n    // additional wrapper for body\n    let swaggerParameters = parameters;\n    if (type === 'body') {\n        swaggerParameters = [\n            {\n                name: 'data',\n                description: 'request body',\n                schema: {\n                    type: 'object',\n                    properties: parameters\n                }\n            }\n        ];\n    } else {\n        swaggerParameters = Object.keys(swaggerParameters).map(key =>\n            Object.assign({ name: key }, swaggerParameters[key]));\n    }\n    swaggerParameters.forEach((item: any) => {\n        item.in = type;\n    });\n\n    SwaggerInjectService.runtime().add(target, name, { [type]: swaggerParameters });\n    return descriptor;\n};\n\nconst request = (method: string, path: string) => (target: any, name: string, descriptor: PropertyDescriptor) => {\n    path = path.split('/').map(item => {\n        if (item.indexOf(':') === 0) item = `{${item.substring(1)}}`;\n        return item;\n    }).join('/');\n    method = _.toLower(method);\n    descriptor.value.method = method;\n    descriptor.value.path = path;\n    SwaggerInjectService.runtime().add(target, name, {\n        request: { method, path },\n    });\n    return descriptor;\n};\n\nconst middlewares = (middlewares: Function[]) => (target: any, name: string, descriptor: PropertyDescriptor) => {\n    descriptor.value.middlewares = middlewares;\n    return descriptor;\n};\n\nconst security = (security: any[]) => (target: any, name: string, descriptor: PropertyDescriptor) => {\n    SwaggerInjectService.runtime().add(target, name, {\n        security\n    });\n};\n\nconst deprecated = (target: any, name: string, descriptor: PropertyDescriptor) => {\n    descriptor.value.deprecated = true;\n    SwaggerInjectService.runtime().add(target, name, { deprecated: true });\n    return descriptor;\n};\n\nexport interface IResponses {\n    [name: number]: any;\n}\nconst defaultResp: IResponses = {\n    200: { description: 'success' }\n};\nconst responses = (responses: IResponses = defaultResp) => (\n    target: any,\n    name: string,\n    descriptor: PropertyDescriptor\n) => {\n    descriptor.value.responses = responses;\n    SwaggerInjectService.runtime().add(target, name, { responses });\n    return descriptor;\n};\nconst desc = _.curry(_desc);\n\n// description and summary\nconst description = desc('description');\n\nconst summary = desc('summary');\n\nconst tags = desc('tags');\n\nconst params = _.curry(_params);\n\n// below are [parameters]\n\n// query params\nconst query = params('query');\n\n// path params\nconst path = params('path');\n\n// body params\nconst body = params('body');\n\n// formData params\nconst formData = params('formData');\n\n// class decorators\nconst tagsAll = (items: string[] | string) => (target: any) => {\n    const tags = is.array(items) ? items : [items];\n    SwaggerInjectService.runtime().addMulti(target, { tags });\n};\n\nconst responsesAll = (responses: IResponses = defaultResp) => (target: any) => {\n    SwaggerInjectService.runtime().addMulti(target, { responses });\n};\n\nconst middlewaresAll = (items: Function[] | Function) => (target: any) => {\n    const middlewares = is.array(items) ? items : [items];\n    target.middlewares = middlewares;\n};\n\nconst securityAll = (security: any[] | any) => (target: any) => {\n    const authentitactions = is.array(security) ? security : [security];\n    SwaggerInjectService.runtime().addMulti(target, {\n        security: authentitactions\n    });\n};\n\nconst deprecatedAll = (target: any) => {\n    SwaggerInjectService.runtime().addMulti(target, { deprecated: true });\n};\n\nconst prefix = (prefix: string) => (target: any) => {\n    SwaggerInjectService.runtime().addMulti(target, { prefix });\n    target.prefix = prefix;\n};\n\nconst queryAll = (parameters: { [name: string]: any }, filters = ['ALL']) => (target: any) => {\n    if (!target.parameters) target.parameters = {};\n    target.parameters.query = parameters; // used in wrapper.js for validation\n    target.parameters.filters = filters; // used in wrapper.js for validation\n    const swaggerParameters = Object.keys(parameters).map(key =>\n        Object.assign({ name: key }, parameters[key]));\n    swaggerParameters.forEach((item) => {\n        item.in = 'query';\n    });\n    SwaggerInjectService.runtime().addMulti(target, { query: swaggerParameters }, filters);\n};\nconst Doc = {\n    request,\n    summary,\n    params,\n    desc,\n    description,\n    query,\n    path,\n    body,\n    tags,\n    middlewares,\n    security,\n    formData,\n    responses,\n    deprecated,\n    tagsAll,\n    responsesAll,\n    middlewaresAll,\n    deprecatedAll,\n    securityAll,\n    queryAll,\n    prefix\n};\n\nexport default Doc;\n\nexport {\n    request,\n    summary,\n    params,\n    desc,\n    description,\n    query,\n    path,\n    body,\n    tags,\n    middlewares,\n    security,\n    formData,\n    responses,\n    deprecated,\n    tagsAll,\n    responsesAll,\n    middlewaresAll,\n    securityAll,\n    deprecatedAll,\n    queryAll,\n    prefix\n};\n"]}