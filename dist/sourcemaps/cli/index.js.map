{"version":3,"sources":["cli/index.ts"],"names":[],"mappings":"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","file":"../../cli/index.js","sourcesContent":["#!/usr/bin / env node\n\nimport { join, dirname } from 'path';\nimport { createWriteStream, existsSync, createReadStream, statSync } from 'fs';\nimport { green, red } from 'colors';\nimport moment from 'moment';\nimport request from 'request';\nimport { Extract } from 'unzip';\nimport { remove, mkdir, copy } from 'fs-extra';\nimport { exec } from 'child_process';\n\nimport { Command, Execute } from 'yicommand';\nimport Typescript from 'typescript';\nimport { find } from 'lodash';\nimport { PYIBuilder } from './builder';\nimport { PYICoreClass } from '../core/pyi';\nimport { PYIApplication } from '../decorators/application';\n\n@Command({\n    context: 'PYI Framework ...',\n    version: require('../../package.json').version\n})\nexport class TestCommand {\n\n    private tsconfigPath?: string;\n\n    @Execute('create <path>')\n    public async created(path: string) {\n        if (!path) { return await console.log(red('not have project name ...')); }\n        await console.log(green(\n            'download https://github.com/huaqingyi/pyi-template/archive/master.zip ...'\n        ));\n        const time = moment().format('YYYY-MM-DD HH');\n        const pack = join(__dirname, `../.temp/${time}.zip`);\n        if (!existsSync(pack)) {\n            console.log(green(\n                'redownload https://github.com/huaqingyi/pyi-template/archive/master.zip ...'\n            ));\n            await new Promise((r) => remove(dirname(pack), r));\n            await new Promise((r) => mkdir(dirname(pack), r));\n            await new Promise((r) => request('http://github.com/huaqingyi/pyi-template/archive/master.zip')\n                .pipe(createWriteStream(pack)).on('close', r));\n        }\n        await console.log(green(\n            'download success ...'\n        ));\n\n        const unzipdir = join(dirname(pack), 'resource');\n        const packdir = join(unzipdir, 'pyi-template-master');\n\n        await new Promise((r) => createReadStream(pack)\n            .pipe(Extract({ path: unzipdir })).on('close', r));\n\n        await console.log(green(\n            'unzip success ...'\n        ));\n        const pdir = join(process.cwd(), path);\n\n        await copy(packdir, pdir);\n\n        await console.log(green(\n            'copy success ...'\n        ));\n\n        return await exec(`cd ${pdir} && npm i`);\n    }\n\n    @Execute('start [application]')\n    public async start(application: string) {\n        if (statSync(application).isFile()) {\n            const Application: PYICoreClass<PYIApplication> = find(\n                await import(join(process.cwd(), application)),\n                ({ _base }) => _base && _base() === PYIApplication\n            );\n            if (!Application) {\n                throw new Error('is not bootstrap application ...');\n            } else {\n                const path = dirname(join(process.cwd(), application));\n                const { config } = Typescript.readConfigFile(\n                    join(`${path}`, 'tsconfig.json'),\n                    Typescript.sys.readFile\n                );\n                const builder = new PYIBuilder(path, join(path, '.runtime'), config);\n                await builder.build();\n                // const app = new Application();\n                // app.setResource(builder.outputs);\n                // await app.bootstrap();\n            }\n        } else {\n            throw new Error('is not bootstrap file ...');\n        }\n    }\n}\n"]}