{"version":3,"sources":["cli/index.ts"],"names":[],"mappings":";;;;;;AAEA,iDAAqC;AACrC,+BAA4B;AAC5B,gDAAwB;AACxB,+BAAiC;AACjC,gEAAmC;AACnC,2BAAiD;AACjD,mCAA4C;AAE5C,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,wBAAwB,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE;IAC1E,MAAM,IAAI,GAAG,KAAK,EAAE,OAA0B,EAAE,QAAgB,EAAE,EAAE;QAChE,MAAM,IAAI,GAAG,UAAG,CAAC,OAAO,CAAC,CAAC;QAC1B,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,WAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAO,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IACF,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;QAClB,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;QACtB,MAAM,IAAI,GAAG,WAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,WAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,IAAI,MAAM,GAAG,iBAAY,CACrB,WAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,EAC9C,EAAE,QAAQ,EAAE,OAAO,EAAE,CACxB,CAAC,QAAQ,EAAE,CAAC;QACb,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,OAAO,IAAI,CAAC,CAAC;QACnE,kBAAa,CAAC,WAAI,CAAC,WAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,EAAE,cAAc,CAAC,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;QACjG,OAAO,CAAC,GAAG,CAAC,cAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;QACvD,OAAO,CAAC,GAAG,CAAC,cAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5B,OAAO,CAAC,GAAG,CAAC,eAAM,CAAC,UAAU,OAAO,WAAW,CAAC,CAAC,CAAC;KACrD;SAAM;QACH,OAAO,CAAC,GAAG,CAAC,YAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;KAC9C;AACL,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,qBAAqB,EAAE,GAAG,EAAE;IAC1C,oBAAI,CACA,WAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,EACzB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QAC5C,KAAK,EAAE,SAAS;KACnB,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,cAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","file":"../../cli/index.js","sourcesContent":["#!/usr/bin/env node\n\nimport { fork } from 'child_process';\nimport { join } from 'path';\nimport args from 'args';\nimport { src, dest } from 'gulp';\nimport install from 'gulp-install';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { green, yellow, red } from 'colors';\n\nargs.command('create', 'create new project ...', async (name, sub, options) => {\n    const copy = async (srcpath: string | string[], destpath: string) => {\n        const task = src(srcpath);\n        return await new Promise((r) => {\n            task.pipe(dest(destpath)).on('end', r).pipe(install());\n        });\n    };\n    if (sub.length === 1) {\n        const [project] = sub;\n        const path = join(process.cwd(), project);\n        await copy(join(__dirname, '../../template/**/*.*'), path);\n        let config = readFileSync(\n            join(__dirname, '../../template/package.json'),\n            { encoding: 'utf-8' }\n        ).toString();\n        config = config.replace(`\"name\": \"pyi\",`, `\"name\": \"${project}\",`);\n        writeFileSync(join(join(process.cwd(), project), 'package.json'), config, { encoding: 'utf-8' });\n        console.log(green('create project files success ...'));\n        console.log(green('use: '));\n        console.log(yellow(`    cd ${project} && npm i`));\n    } else {\n        console.log(red('input project name ...'));\n    }\n}).command('run', 'run appliaction ...', () => {\n    fork(\n        join(__dirname, 'run.js'),\n        process.argv.slice(3, process.argv.length), {\n        stdio: 'inherit'\n    });\n});\n\nargs.parse(process.argv);\n"]}