{"version":3,"sources":["cli/index.ts"],"names":[],"mappings":"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","file":"../../cli/index.js","sourcesContent":["#!/usr/bin/env node\n\nimport 'ts-node/register';\nimport { join, dirname } from 'path';\nimport { filter, map } from 'lodash';\nimport { PYIApplication } from '../decorators';\nimport { yellow, green } from 'colors';\nimport { src, dest } from 'gulp';\nimport { init, write } from 'gulp-sourcemaps';\nimport { createProject } from 'gulp-typescript';\nimport merge from 'merge2';\nimport install from 'gulp-install';\nimport nodemon from 'gulp-nodemon';\n\nconst rootpath = join(process.cwd(), process.argv[2]);\nconst fileinfo = (process.argv[2].split('/').pop() || '').split('.');\nfileinfo.pop();\n\n(async () => {\n    const packs = await import(rootpath);\n    const [Application] = filter(packs, (comp) => comp.isApplication || false);\n    const app: PYIApplication = new Application();\n    // tslint:disable-next-line: no-shadowed-variable\n    app.runtime(async ({ config, watcher, starter }) => {\n        console.log(yellow('import project all file success ...'));\n        if (config.runtime === true) {\n            if (config.watch === true) {\n                watcher.on('all', async (type, path) => {\n                    console.log(`${yellow(type)}: ${green(path)}`);\n                    const tsr = src(path).pipe(init()).pipe(createProject(config.compilerOptions)());\n                    const projectpath = dirname(rootpath);\n                    const filepath = dirname(path);\n                    const outpath = filepath.replace(projectpath, config.output);\n                    const tscr = await merge([\n                        tsr.dts.pipe(dest(outpath)),\n                        tsr.js.pipe(write('./sourcemaps'))\n                            .pipe(dest(outpath))\n                    ]).pipe(install());\n                    return await tscr;\n                });\n            } else {\n                watcher.close();\n            }\n\n            const tstask = src([\n                ...map(config.resolve.extensions, (ext) => join(config.entry, `**/*${ext}`)),\n                rootpath\n            ]);\n            const tsResult = tstask.pipe(init()).pipe(createProject(config.compilerOptions)());\n\n            const ts = await merge([\n                tsResult.dts.pipe(dest(config.output)),\n                tsResult.js.pipe(write('./sourcemaps'))\n                    .pipe(dest(config.output))\n            ]).on('end', async () => {\n                console.log(yellow('build success'));\n                await new Promise((r) => setTimeout(r, 2000));\n\n                nodemon({\n                    script: join(__dirname, 'starter.js'),\n                    args: [\n                        join(config.output, [...fileinfo, 'js'].join('.')),\n                        ...process.argv.slice(3, process.argv.length)\n                    ],\n                    ext: config.resolve.extensions.join(' '),\n                    watch: [\n                        ...map(config.resolve.extensions, (ext) => join(config.entry, `**/*${ext}`)),\n                        rootpath\n                    ],\n                    stdin: true,\n                    stdout: true\n                });\n            }).pipe(install());\n\n            return await ts;\n        } else {\n            if (config.watch === true) {\n                watcher.close();\n                nodemon({\n                    script: join(__dirname, 'starter.js'),\n                    args: [rootpath, ...process.argv.slice(3, process.argv.length)],\n                    ext: config.resolve.extensions.join(' '),\n                    watch: [\n                        ...map(config.resolve.extensions, (ext) => join(config.entry, `**/*${ext}`)),\n                        rootpath\n                    ],\n                    stdin: true,\n                    stdout: true\n                });\n            } else {\n                starter();\n            }\n        }\n    });\n})();\n"]}