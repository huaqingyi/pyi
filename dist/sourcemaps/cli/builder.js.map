{"version":3,"sources":["cli/builder.ts"],"names":[],"mappings":"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","file":"../../cli/builder.js","sourcesContent":["import 'reflect-metadata';\nimport { src, dest, series } from 'gulp';\nimport { join } from 'path';\nimport { createProject, Settings } from 'gulp-typescript';\nimport { get } from 'node-emoji';\nimport { red, green } from 'colors';\nimport * as sourcemaps from 'gulp-sourcemaps';\nimport merge from 'merge2';\n\nexport class PYIBuilder {\n    public outputs: string[];\n\n    constructor(\n        private srcpath: string,\n        private destpath: string,\n        private setting: Settings,\n    ) {\n        this.outputs = [];\n    }\n\n    public compile() {\n        let tsResult: any = src([\n            join(this.srcpath, '**/*.ts'),\n            join(this.srcpath, '**/*.tsx'),\n            join(this.srcpath, '**/*.js'),\n            join(this.srcpath, '**/*.jsx'),\n        ]);\n\n        if (this.setting.sourceMap === true) {\n            tsResult = tsResult.pipe(sourcemaps.init());\n        }\n\n        tsResult = tsResult.pipe(createProject(this.setting)());\n\n        const ms = [];\n        if (this.setting.declaration === true) { ms.push(tsResult.dts.pipe(dest(this.destpath))); }\n\n        let js = tsResult.js;\n        if (this.setting.sourceMap === true) {\n            js = js.pipe(sourcemaps.write('./sourcemaps'));\n        }\n\n        ms.push(js.pipe(dest((file) => {\n            const output = join(this.destpath, file.relative.replace(\n                new RegExp(`${file.stem}${file.extname}$`, 'gi'), ''\n            ));\n            const path = join(output, `${file.stem}${file.extname}`);\n            if (require.cache[path]) {\n                delete require.cache[path];\n            }\n            console.log(`${get('kiss')}  ${green(`${path}`)}`);\n            this.outputs.push(path);\n            return this.destpath;\n        })));\n        /**\n         * merge result\n         */\n        return merge(ms);\n    }\n\n    public async build() {\n        await new Promise((r) => {\n            series(this.compile.bind(this), r)((err) => {\n                console.log(red(err));\n            });\n        });\n        return this.outputs;\n    }\n}\n"]}