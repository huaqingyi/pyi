{"version":3,"sources":["decorators/configuration.ts"],"names":[],"mappings":";;AAAA,kCAAwD;AAexD,SAAgB,aAAa,CAAoB,KAAY;IACzD,IACI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,KAAK,gBAAgB;QACjD,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,KAAK,mBAAmB,EACtD;QACE,OAAO,KAAK,CAAC;KAChB;SAAM;QACH,OAAO,CAAC,MAAc,EAAE,EAAE;YACtB,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;YAC/B,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC;KACL;AACL,CAAC;AAZD,sCAYC;AAMD,MAAa,gBAA8B,SAAQ,cAAO;IAG/C,MAAM,CAAC,KAAK;QACf,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAGM,WAAW;QACd,IAAI,IAAI,GAAW,aAAa,CAAC;QACjC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;YAAE,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;SAAE;QAC1D,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;YACzB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;YACvC,IAAI,IAAI,CAAC,IAAI,EAAE;gBAAE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;aAAE;SACrE;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAjBD,4CAiBC;AAgGD,MAAa,mBAAiC,SAAQ,gBAAgB;IAmBlE;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;QACjB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IA9BM,MAAM,CAAC,KAAK;QACf,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IA8BM,WAAW;QACd,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/B,IAAI,IAAI,CAAC,IAAI,EAAE;YAAE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;SAAE;QAClE,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAtCD,kDAsCC","file":"../../decorators/configuration.js","sourcesContent":["import { PYICore, PYIApp, PYICoreClass } from '../core';\nimport { PYIController, PYIMiddleware, PYIInterceptor } from './controller';\nimport { ClassTransformOptions } from 'class-transformer';\nimport { ValidatorOptions } from 'class-validator';\nimport { AuthorizationChecker } from 'routing-controllers/AuthorizationChecker';\nimport { CurrentUserChecker } from 'routing-controllers/CurrentUserChecker';\nimport { SignaleOptions } from 'signale';\nimport { PYIPlugin } from './plugins';\nimport { SwaggerJSON } from '../libs/swagger';\nimport { PYIServlet } from '../libs/jwt/jwt.auth.servlet';\n\nexport function Configuration<VC extends PYICoreClass<PYIConfiguration>>(tprops: VC): VC;\nexport function Configuration<Props = any>(\n    props: Props & any\n): <VC extends PYICoreClass<PYIConfiguration>>(target: VC) => VC;\nexport function Configuration<Props extends any>(props: Props) {\n    if (\n        props._base && props._base() === PYIConfiguration ||\n        props._base && props._base() === PYIAppConfiguration\n    ) {\n        return props;\n    } else {\n        return (target: PYIApp) => {\n            target.prototype.props = props;\n            return target;\n        };\n    }\n}\n\nexport interface AppSwaggerJSON extends SwaggerJSON {\n    path: string;\n}\n\nexport class PYIConfiguration<Props = any> extends PYICore {\n    [x: string]: any;\n\n    public static _base(): PYIApp {\n        return PYIConfiguration;\n    }\n\n    public props!: Props;\n    public _pyiruntime() {\n        let mode: string = 'development';\n        if (process.env.NODE_ENV) { mode = process.env.NODE_ENV; }\n        if (this[this.mode || mode]) {\n            const resp = this[this.mode || mode]();\n            if (resp.then) { return resp.then(() => this).catch(() => this); }\n        }\n        return this;\n    }\n}\n\nexport interface PYIRoutingConfiguration {\n    /**\n     * Indicates if cors are enabled.\n     * This requires installation of additional module (cors for express and kcors for koa).\n     */\n    cors?: boolean | Object;\n    /**\n     * Global route prefix, for example '/api'.\n     */\n    routePrefix?: string;\n    /**\n     * List of controllers to register in the framework or directories from where to import all your controllers.\n     */\n    controllers: Array<PYICoreClass<PYIController>> | string[];\n    /**\n     * List of middlewares to register in the framework or directories from where to import all your middlewares.\n     */\n    middlewares?: Array<PYICoreClass<PYIMiddleware>> | string[];\n    /**\n     * List of interceptors to register in the framework or directories from where to import all your interceptors.\n     */\n    interceptors?: Array<PYICoreClass<PYIInterceptor>> | string[];\n    /**\n     * Indicates if class-transformer should be used to perform serialization / deserialization.\n     */\n    classTransformer?: boolean;\n    /**\n     * Global class transformer options passed to class-transformer during classToPlain operation.\n     * This operation is being executed when server returns response to user.\n     */\n    classToPlainTransformOptions?: ClassTransformOptions;\n    /**\n     * Global class transformer options passed to class-transformer during plainToClass operation.\n     * This operation is being executed when parsing user parameters.\n     */\n    plainToClassTransformOptions?: ClassTransformOptions;\n    /**\n     * Indicates if class-validator should be used to auto validate objects injected into params.\n     * You can also directly pass validator options to enable validator with a given options.\n     */\n    validation?: boolean | ValidatorOptions;\n    /**\n     * Indicates if default routing-controller's error handler is enabled or not.\n     * Enabled by default.\n     */\n    defaultErrorHandler?: boolean;\n    /**\n     * Map of error overrides.\n     */\n    errorOverridingMap?: {\n        [key: string]: any;\n    };\n    /**\n     * Special function used to check user authorization roles per request.\n     * Must return true or promise with boolean true resolved for authorization to succeed.\n     */\n    authorizationChecker?: AuthorizationChecker;\n    /**\n     * Special function used to get currently authorized user.\n     */\n    currentUserChecker?: CurrentUserChecker;\n    /**\n     * Default settings\n     */\n    defaults?: {\n        /**\n         * If set, all null responses will return specified status code by default\n         */\n        nullResultCode?: number;\n        /**\n         * If set, all undefined responses will return specified status code by default\n         */\n        undefinedResultCode?: number;\n        /**\n         * Default param options\n         */\n        paramOptions?: {\n            /**\n             * If true, all non-set parameters will be required by default\n             */\n            required?: boolean;\n        };\n    };\n\n    debugOptions?: SignaleOptions;\n\n    development?: () => any;\n    production?: () => any;\n\n    docs?: SwaggerJSON | false;\n    jwt?: PYICoreClass<PYIServlet> | false;\n    jwtSecretKey?: string;\n}\n\nexport class PYIAppConfiguration<Props = any> extends PYIConfiguration implements PYIRoutingConfiguration {\n    public static _base(): PYIApp {\n        return PYIAppConfiguration;\n    }\n\n    public props!: Props;\n\n    public controllers: Array<PYICoreClass<PYIController>>;\n    public middlewares: Array<PYICoreClass<PYIMiddleware>>;\n    public interceptors: Array<PYICoreClass<PYIInterceptor>>;\n    public plugins: Array<PYICoreClass<PYIPlugin>>;\n    public defaultErrorHandler: boolean;\n    public port: number;\n    public host: string;\n    public debugOptions?: SignaleOptions;\n    public docs: AppSwaggerJSON | false;\n    public jwt: PYICoreClass<PYIServlet> | false;\n    public jwtSecretKey: string;\n\n    constructor() {\n        super();\n        this.controllers = [];\n        this.middlewares = [];\n        this.interceptors = [];\n        this.plugins = [];\n        this.defaultErrorHandler = true;\n        this.port = 4000;\n        this.host = 'localhost';\n        this.docs = false;\n        this.jwt = false;\n        this.jwtSecretKey = '';\n    }\n\n    public _pyiruntime() {\n        const resp = this[this.mode]();\n        if (resp.then) { return resp.then(() => this).catch(() => this); }\n        return this;\n    }\n}\n"]}