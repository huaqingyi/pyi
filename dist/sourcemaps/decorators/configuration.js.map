{"version":3,"sources":["decorators/configuration.ts"],"names":[],"mappings":";;AAAA,mCAAoC;AACpC,+CAA8D;AAC9D,sCAAqE;AAGrE;;GAEG;AACH,MAAsB,oBAA4B,SAAQ,kBAAO;IAS7D,YAAY,GAAG,KAAU,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;IANhC,MAAM,CAAC,QAAQ;QAClB,OAAO,oBAAoB,CAAC;IAChC,CAAC;IAMM,QAAQ,CAAC,MAAuB;QACnC,MAAM,OAAO,GAAW,MAAM,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,MAAM,KAAK,CAAC,mDAAmD,CAAC,CAAC;aACpE;YACD,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;CACJ;AArBD,oDAqBC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAAc,MAAa;IACpD,MAAM,EAAE,QAAQ,EAAE,GAAI,MAAc,CAAC;IACrC;;OAEG;IACH,IAAI,QAAQ,IAAI,mBAAU,CAAC,QAAQ,CAAC,EAAE;QAClC,IACI,QAAQ,EAAE,KAAK,oBAAoB;YACnC,QAAQ,EAAE,KAAK,gCAAuB,EACxC;YACE,OAAO,MAAM,CAAC;SACjB;aAAM;YACH;;eAEG;YACH,OAAO,CAAC,MAAW,EAAE,GAAY,EAAE,EAAE;gBACjC,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC;YACpC,CAAC,CAAC;SACL;KACJ;SAAM;QACH,OAAO,MAAM,CAAC;KACjB;AACL,CAAC;AAtBD,sCAsBC","file":"../../decorators/configuration.js","sourcesContent":["import { isFunction } from 'lodash';\nimport { PYIBase, RuntimeAutoChange } from '../core/pyi.base';\nimport { PYIAutoAppConfiguration, AppConfigOption } from '../config';\nimport { PYIArgs } from '../lib';\n\n/**\n * Component base\n */\nexport abstract class PYIAutoConfiguration<Props> extends PYIBase implements RuntimeAutoChange {\n    [x: string]: any;\n    public static _pyi: () => any;\n    public static _extends() {\n        return PYIAutoConfiguration;\n    }\n\n    public props?: Props;\n\n    constructor(...props: any) { super(); }\n\n    public _runtime(config: AppConfigOption) {\n        const current: string = config.mode;\n        if (!this[current]) {\n            if (!this.default) {\n                throw Error('configuration not use mode and not have default .');\n            }\n            return this.default;\n        }\n        return this[current];\n    }\n}\n\n/**\n * This's application plugin or libs, use extends. (插件或者包, 自行扩展)\n * @param config This is contructor argv and classes props, working is auto inject.\n * (config是实例化的参数, 同时也是我们的props, 自动注入类实例.)\n */\nexport function Configuration<Props = any>(config: Props): any {\n    const { _extends } = (config as any);\n    /**\n     * 如果是直接修饰类\n     */\n    if (_extends && isFunction(_extends)) {\n        if (\n            _extends() === PYIAutoConfiguration ||\n            _extends() === PYIAutoAppConfiguration\n        ) {\n            return config;\n        } else {\n            /**\n             * 带参数的修饰\n             */\n            return (target: any, key?: string) => {\n                target.prototype.props = config;\n            };\n        }\n    } else {\n        return config;\n    }\n}\n"]}