{"version":3,"sources":["libs/swagger/swagger.ts"],"names":[],"mappings":";;;;;AAAA,qDAAwD;AAExD,kEAAyC;AACzC,oEAAuC;AACvC,8DAAkC;AAClC,0DAA8B;AA+E9B,MAAa,OAAO;IACT,MAAM,CAAC,KAAK,CACf,IAAY,EACZ,GAA6B,EAC7B,WAAyB,EACzB,UAA8B,EAC9B,IAAsC,EACtC,OAAwB,EACxB,SAAiC,EACjC,aAAqC,EACrC,UAAkC,EAClC,gBAAwC;QAExC,MAAM,MAAM,GAAG,qCAAoB,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC;QACvD,IAAI,WAAW,GAAQ,EAAE,CAAC;QAC1B,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;gBAAE,UAAU,CAAC,IAAI,GAAG,EAAE,CAAC;aAAE;YAC/C,WAAW,GAAG,uBAAY,CAAC,UAAiB,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,WAAW,EAAE;YAAE,WAAW,GAAG,EAAE,CAAC;SAAE;QACvC,GAAG,CAAC,GAAG,CAAC,wBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,6BAA6B;QACvD,IAAI,KAAK,GAAQ,EAAE,CAAC;QACpB,KAAK,GAAG;YACJ,GAAG,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;YACvB,GAAG,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC;YAC5B,GAAG,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC;SAC/B,CAAC;QACF,GAAG,CAAC,GAAG,CAAC,qBAAO,CAAC,mBAAK,CAAC,IAAI,EAAE,wBAAS,CAAC,KAAK,CAAC;YACxC,GAAG,MAAM;YACT,GAAG,WAAW;YACd,GAAG,WAAW;YACd,KAAK;SACR,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,UAAU,EAAE,gBAAgB,CACvE,CAAC,CAAC,CAAC,CAAC;IACT,CAAC;CACJ;AAnCD,0BAmCC","file":"../../../libs/swagger/swagger.js","sourcesContent":["import { SwaggerInjectService } from './swagger.object';\nimport Koa from 'koa';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-koa';\nimport convert from 'koa-convert';\nimport mount from 'koa-mount';\nimport { PYIApplication } from '../../decorators';\n\n// with jsdoc\n// const options = {\n//     swaggerDefinition: {\n//       info: {\n//         title: 'API', // Title (required)\n//         version: '2.0.0', // Version (required)\n//       },\n//     },\n//     apis: [\n//       './src/module/swagger/swagger.yaml',\n//       './src/routes/*.js', // Path to the API docs from root\n//       './src/module/swagger/parameters.yaml'\n//     ],\n//   };\n/**\n * 参数\n */\nexport interface SwaggerOption {\n    [x: string]: any;\n    swaggerDefinition?: {\n        info?: {\n            title?: string, // Title (required)\n            version?: string, // Version (required)\n        },\n    };\n    apis?: string[];\n}\n\ninterface JsonObject extends SwaggerOption { [key: string]: any; }\ninterface SwaggerUiOptions { [key: string]: any; }\ninterface SwaggerOptions { [key: string]: any; }\nexport interface SwaggerJSON {\n    [x: string]: any;\n    swagger?: string;\n    info?: {\n        description?: string;\n        title?: string;\n        termsOfService?: string;\n        contact?: {\n            email?: string;\n        },\n        license?: {\n            name?: string;\n            url?: string;\n        }\n    };\n    host?: string;\n    basePath?: string;\n    tags?: Array<{\n        name?: string;\n        description?: string;\n        externalDocs?: {\n            description?: string;\n            url?: string;\n        }\n    }>;\n    schemes?: string[];\n    paths?: { [x: string]: any };\n    securityDefinitions?: {\n        api_key?: {\n            type?: string;\n            name?: string;\n            in?: string;\n        },\n        petstore_auth?: {\n            type?: string;\n            authorizationUrl?: string;\n            flow?: string;\n            scopes?: {\n                read?: string;\n                write?: string;\n            }\n        }\n    };\n}\n\nexport class Swagger {\n    public static build(\n        path: string,\n        app: PYIApplication<any, any>,\n        swaggerJSON?: SwaggerJSON,\n        swaggerDoc?: JsonObject | null,\n        opts?: SwaggerUiOptions | false | null,\n        options?: SwaggerOptions,\n        customCss?: string | false | null,\n        customfavIcon?: string | false | null,\n        swaggerUrl?: string | false | null,\n        customeSiteTitle?: string | false | null\n    ) {\n        const config = SwaggerInjectService.runtime().toJSON();\n        let swaggerSpec: any = {};\n        if (swaggerDoc) {\n            if (!swaggerDoc.apis) { swaggerDoc.apis = []; }\n            swaggerSpec = swaggerJSDoc(swaggerDoc as any);\n        }\n        if (!swaggerJSON) { swaggerJSON = {}; }\n        app.use(swaggerUi.serve); // serve swagger static files\n        let paths: any = {};\n        paths = {\n            ...(config.paths || []),\n            ...(swaggerSpec.paths || []),\n            ...(swaggerJSON.paths || [])\n        };\n        app.use(convert(mount(path, swaggerUi.setup({\n            ...config,\n            ...swaggerJSON,\n            ...swaggerSpec,\n            paths\n        }, opts, options, customCss, customfavIcon, swaggerUrl, customeSiteTitle\n        ))));\n    }\n}\n"]}