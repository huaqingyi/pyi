{"version":3,"sources":["libs/jwt/jwt.auth.servlet.ts"],"names":[],"mappings":";;AAAA,2CAAkE;AAClE,qCAA2D;AAC3D,iDAAiD;AACjD,8CAAmD;AAEnD,MAAa,UAAW,SAAQ,cAAO;IAC5B,MAAM,CAAC,KAAK;QACf,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,oCAAoC;IAC7B,GAAG,CAAC,MAAgB,EAAE,SAAiB,EAAE,OAAY,EAAE,IAAiC,IAAS,CAAC;IACzG,oCAAoC;IAC7B,QAAQ,CAAC,SAAiB,EAAE,OAAY,EAAE,IAAiC,IAAS,CAAC;IAC5F,oCAAoC;IAC7B,QAAQ,CAAC,OAAmB,EAAE,SAAiB,EAAE,OAAY,EAAE,IAAiC,IAAS,CAAC;CACpH;AAXD,gCAWC;AAED,MAAa,cAAe,SAAQ,UAAU;IACnC,KAAK,CAAC,GAAG,CAEZ,MAAgB,EAChB,SAAiB,EACjB,OAAY,EACZ,IAAiC;QAEjC,MAAM,MAAM,GAAe,CAAC,IAAI,CAAC,UAAU,IAAI,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,CAAC;QAC9E,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YAC/B,OAAO,MAAM,IAAI,EAAE,CAAC;SACvB;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;SAClD;IACL,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,SAAiB,EAAE,OAAO,EAAE,IAAI;QAClD,MAAM,GAAG,GAAG,IAAI,iBAAW,CAAC,EAAE,CAAC,CAAC;QAChC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;QACnB,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACvC,OAAO,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAiB,EAAE,OAAO,EAAE,IAAI;QAC3D,MAAM,GAAG,GAAG,IAAI,iBAAW,CAAC,EAAE,CAAC,CAAC;QAChC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;QACnB,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACxD,OAAO,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;CACJ;AA/BD,wCA+BC;AAED,SAAgB,UAAU,CAAC,OAA+B;IACtD,OAAO,CAAC,MAAmC,EAAE,GAAW,EAAE,EAAE;QACxD,IAAI,MAAM,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,EAAE,KAAK,0BAAa,EAAE;YAC5D,mBAAS,CAAC,OAAc,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SAC1C;aAAM;YACH,OAAO,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;YAC9D,OAAO,MAAM,CAAC;SACjB;IACL,CAAC,CAAC;AACN,CAAC;AATD,gCASC","file":"../../../libs/jwt/jwt.auth.servlet.js","sourcesContent":["import { KoaMiddlewareInterface, UseBefore } from '../../extends';\nimport { PYICore, PYIApp, PYICoreClass } from '../../core';\nimport { PYIController } from '../../decorators';\nimport { ResponseDto } from '../../decorators/dto';\n\nexport class PYIServlet extends PYICore {\n    public static _base(): PYIApp {\n        return PYIServlet;\n    }\n\n    // tslint:disable-next-line:no-empty\n    public use(action: Function, secretKey: string, context: any, next: (err?: any) => Promise<any>): any { }\n    // tslint:disable-next-line:no-empty\n    public notFound(secretKey: string, context: any, next: (err?: any) => Promise<any>): any { }\n    // tslint:disable-next-line:no-empty\n    public multiple(actions: Function[], secretKey: string, context: any, next: (err?: any) => Promise<any>): any { }\n}\n\nexport class JWTAuthServlet extends PYIServlet {\n    public async use(\n        this: PYIController,\n        action: Function,\n        secretKey: string,\n        context: any,\n        next: (err?: any) => Promise<any>\n    ) {\n        const whites: Function[] = (this.excludeJWT && await this.excludeJWT()) || [];\n        if (whites.indexOf(action) !== -1) {\n            return await next();\n        } else {\n            this.servlet(action, secretKey, context, next);\n        }\n    }\n\n    public async notFound(secretKey: string, context, next) {\n        const dto = new ResponseDto({});\n        dto.errcode = 1404;\n        const err = new Error('Not Found ...');\n        context.body = await dto.throws(err);\n        await next(context);\n    }\n\n    public async multiple(actions, secretKey: string, context, next) {\n        const dto = new ResponseDto({});\n        dto.errcode = 1404;\n        const err = new Error('Multiple identical routers ...');\n        context.body = await dto.throws(err);\n        await next(context);\n    }\n}\n\nexport function UseServlet(servlet: KoaMiddlewareInterface) {\n    return (target: PYICoreClass<PYIController>, key: string) => {\n        if (target && target._base && target._base() === PYIController) {\n            UseBefore(servlet as any)(target, key);\n        } else {\n            console.error('Servlet is Controller actions decorators ...');\n            return target;\n        }\n    };\n}\n"]}