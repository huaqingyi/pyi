{"version":3,"sources":["libs/chokidar.ts"],"names":[],"mappings":"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","file":"../../libs/chokidar.js","sourcesContent":["import chokidar, { FSWatcher } from 'chokidar';\nimport { gray } from 'colors';\nimport { map } from 'lodash';\nimport { dirname } from 'path';\nimport { PYIAppConfiguration } from '../decorators';\nimport { PYIApp } from '../core';\nimport { get } from 'node-emoji';\n\nexport class PYIChokidar {\n    public static async runtime(mode: string, callback: (file: PYIApp | PYIApp[]) => any) {\n        return (new PYIChokidar(mode, callback)).runtime();\n    }\n\n    public config!: PYIAppConfiguration;\n    public comps: PYIApp[];\n    private callback: (file: PYIApp | PYIApp[]) => any;\n    private watcher: FSWatcher;\n    private appPath: string;\n    private projectPath: string;\n    private mode: string;\n    private fileTrans: { [x: string]: PYIApp | PYIApp[]; };\n\n    constructor(mode: string, callback: (file: PYIApp | PYIApp[]) => any) {\n        this.comps = [];\n        this.fileTrans = {};\n        this.mode = mode;\n        this.callback = callback;\n        this.appPath = process.argv[1];\n        this.projectPath = dirname(this.appPath);\n        this.watcher = chokidar.watch(this.projectPath, {\n            ignored: new RegExp(`${this.appPath}|.d.ts`, 'gi')\n        });\n    }\n\n    public async addFile(path: string) {\n        let comp: any = {};\n        try {\n            comp = await import(path);\n            // tslint:disable-next-line:no-empty\n        } catch (err) { }\n\n        if (!comp) { return false; }\n        await Promise.all(map(comp, async (o, i) => {\n            if (!comp[i] || !comp[i].prototype) { return await o; }\n            comp[i].prototype.mode = await this.mode;\n            if (comp[i]._pyi) {\n                const _pyi = comp[i]._pyi();\n                comp[i]._pyi = () => ({\n                    ..._pyi, path\n                });\n            } else {\n                comp[i]._pyi = () => ({ path });\n            }\n            const { _base } = await comp[i];\n            if (_base && _base() === PYIAppConfiguration) {\n                this.config = await (comp[i] as any)._pyiconnect()._pyiruntime();\n            }\n            await this.callback(o);\n            await this.comps.push(o);\n            return await o;\n        }));\n        this.fileTrans[path] = comp;\n        console.log(`${get('kiss')}  ${gray(`ready ${path} has been added ...`)}`);\n    }\n\n    public async runtime(): Promise<PYIChokidar> {\n        return new Promise<PYIChokidar>((r) => {\n            this.watcher.on('add', this.addFile.bind(this));\n            this.watcher.on('ready', () => r(this));\n        }).then((_this) => {\n            this.watcher.close();\n            return _this;\n        });\n    }\n}\n"]}