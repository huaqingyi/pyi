{"version":3,"sources":["libs/chokidar.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,wDAA+C;AAC/C,mCAA8B;AAC9B,mCAA6B;AAC7B,8CAAwD;AAExD,MAAa,WAAW;IAapB,YAAY,OAA0B,EAAE,IAAY;QAChD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,kBAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAlBM,MAAM,CAAC,OAAO,CAAC,OAA0B,EAAE,IAAY;QAC1D,OAAO,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAkBM,KAAK,CAAC,OAAO,CAAC,IAAY;QAC7B,MAAM,IAAI,GAAG,wDAAa,IAAI,GAAC,CAAC;QAChC,IAAI,CAAC,IAAI,EAAE;YAAE,OAAO,KAAK,CAAC;SAAE;QAC5B,MAAM,OAAO,CAAC,GAAG,CAAC,YAAG,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBAAE,OAAO,MAAM,CAAC,CAAC;aAAE;YACjC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC;YACzC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;gBACd,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC5B,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC;oBAClB,GAAG,IAAI,EAAE,IAAI;iBAChB,CAAC,CAAC;aACN;YACD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,oCAAuB,EAAE;gBAC9C,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAK,IAAI,CAAC,CAAC,CAAS,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;aAC9D;YACD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,OAAO,MAAM,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,aAAI,CAAC,QAAQ,IAAI,qBAAqB,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,KAAK,CAAC,KAAK;QACd,OAAO,IAAI,OAAO,CAAc,CAAC,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACrB,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AArDD,kCAqDC","file":"../../libs/chokidar.js","sourcesContent":["import chokidar, { FSWatcher } from 'chokidar';\nimport { blue } from 'colors';\nimport { map } from 'lodash';\nimport { PYIAutoAppConfiguration } from '../decorators';\n\nexport class PYIChokidar {\n    public static runtime(dirname: string | string[], mode: string) {\n        return new PYIChokidar(dirname, mode);\n    }\n\n    public files: { [x: string]: any };\n    public comps: any[];\n    public appconfig: any;\n    public mode: string;\n\n    private dirname: string | string[];\n    private watcher: FSWatcher;\n\n    constructor(dirname: string | string[], mode: string) {\n        this.dirname = dirname;\n        this.files = {};\n        this.comps = [];\n        this.mode = mode;\n        this.watcher = chokidar.watch(this.dirname);\n    }\n\n    public async addFile(path: string) {\n        const comp = await import(path);\n        if (!comp) { return false; }\n        await Promise.all(map(comp, async (o, i) => {\n            if (!comp[i]) { return await o; }\n            comp[i].prototype.mode = await this.mode;\n            if (comp[i]._pyi) {\n                const _pyi = comp[i]._pyi();\n                comp[i]._pyi = () => ({\n                    ..._pyi, path\n                });\n            }\n            const { _root } = await comp[i];\n            if (_root && _root() === PYIAutoAppConfiguration) {\n                this.appconfig = await (new (comp[i] as any)())._runtime();\n            }\n            await this.comps.push(o);\n            return await o;\n        }));\n        this.files[path] = comp;\n        console.log(blue(`File ${path} has been added ...`));\n    }\n\n    public async setup(): Promise<PYIChokidar> {\n        return new Promise<PYIChokidar>((r) => {\n            this.watcher.on('add', this.addFile.bind(this));\n            this.watcher.on('ready', () => r(this));\n        }).then((_this) => {\n            this.watcher.close();\n            return _this;\n        });\n    }\n}\n"]}