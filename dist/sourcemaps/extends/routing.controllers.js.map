{"version":3,"sources":["extends/routing.controllers.ts"],"names":[],"mappings":"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","file":"../../extends/routing.controllers.js","sourcesContent":["// import { RoutingControllers as RRoutingControllers } from 'routing-controllers/RoutingControllers';\nimport {\n    BaseDriver, ActionMetadata, Action,\n    RoutingControllersOptions, InterceptorInterface,\n    UseBefore,\n} from 'routing-controllers';\nimport { ActionParameterHandler } from 'routing-controllers/ActionParameterHandler';\nimport { MetadataBuilder } from 'routing-controllers/metadata-builder/MetadataBuilder';\nimport { InterceptorMetadata } from 'routing-controllers/metadata/InterceptorMetadata';\nimport { isPromiseLike } from 'routing-controllers/util/isPromiseLike';\nimport { runInSequence } from 'routing-controllers/util/runInSequence';\nimport { importClassesFromDirectories } from 'routing-controllers/util/importClassesFromDirectories';\nimport { getFromContainer, ValidationOptions } from 'class-validator';\nimport { PYIThrows } from '../decorators/execption';\nimport { PYIDto } from '../decorators/dto';\nimport { PYICoreClass } from '../core/pyi';\n\nexport * from 'routing-controllers';\n\n/**\n * Registers controllers and middlewares in the given server framework.\n */\nexport class RoutingControllers<T extends BaseDriver> {\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to check and handle controller action parameters.\n     */\n    private parameterHandler: ActionParameterHandler<T>;\n\n    /**\n     * Used to build metadata objects for controllers and middlewares.\n     */\n    private metadataBuilder: MetadataBuilder;\n\n    /**\n     * Global interceptors run on each controller action.\n     */\n    private interceptors: InterceptorMetadata[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private driver: T, private options: RoutingControllersOptions) {\n        this.parameterHandler = new ActionParameterHandler(driver);\n        this.metadataBuilder = new MetadataBuilder(options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Initializes the things driver needs before routes and middleware registration.\n     */\n    public initialize(): this {\n        this.driver.initialize();\n        return this;\n    }\n\n    /**\n     * Registers all given interceptors.\n     */\n    public registerInterceptors(classes?: Function[]): this {\n        const interceptors = this.metadataBuilder\n            .buildInterceptorMetadata(classes)\n            .sort((middleware1, middleware2) => middleware1.priority - middleware2.priority)\n            .reverse();\n        this.interceptors.push(...interceptors);\n        return this;\n    }\n\n    /**\n     * Registers all given controllers and actions from those controllers.\n     */\n    public registerControllers(classes?: Function[]): this {\n        const controllers = this.metadataBuilder.buildControllerMetadata(classes);\n        controllers.forEach((controller) => {\n            controller.actions.forEach((actionMetadata) => {\n                const interceptorFns = this.prepareInterceptors([\n                    ...this.interceptors,\n                    ...actionMetadata.controllerMetadata.interceptors,\n                    ...actionMetadata.interceptors\n                ]);\n                this.driver.registerAction(actionMetadata, (action: Action) => {\n                    return this.executeAction(actionMetadata, action, interceptorFns);\n                });\n            });\n        });\n        this.driver.registerRoutes();\n        return this;\n    }\n\n    /**\n     * Registers post-execution middlewares in the driver.\n     */\n    public registerMiddlewares(type: 'before' | 'after', classes?: Function[]): this {\n        this.metadataBuilder\n            .buildMiddlewareMetadata(classes)\n            .filter((middleware) => middleware.global && middleware.type === type)\n            .sort((middleware1, middleware2) => middleware2.priority - middleware1.priority)\n            .forEach((middleware) => this.driver.registerMiddleware(middleware));\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes given controller action.\n     */\n    protected executeAction(actionMetadata: ActionMetadata, action: Action, interceptorFns: Function[]) {\n\n        // compute all parameters\n        const paramsPromises = actionMetadata.params\n            .sort((param1, param2) => param1.index - param2.index)\n            .map((param) => this.parameterHandler.handle(action, param));\n\n        const controllerInstance = actionMetadata.controllerMetadata.instance;\n\n        const Dto = Reflect.getMetadata('design:returntype', controllerInstance, actionMetadata.method);\n\n        // after all parameters are computed\n        return Promise.all(paramsPromises).then(async (params) => {\n            let body = {};\n            let response: Promise<any> | PYICoreClass<PYIThrows<any>> | any;\n            // execute action and handle result\n            const allParams = actionMetadata.appendParams ? (\n                actionMetadata.appendParams(action).concat(params)\n            ) : params;\n            if (actionMetadata.methodOverride) {\n                response = actionMetadata.methodOverride(\n                    actionMetadata, action, allParams\n                );\n            } else {\n                response = await controllerInstance[actionMetadata.method].apply(controllerInstance, params);\n            }\n\n            if (\n                response &&\n                response._base &&\n                response._base() === PYIThrows\n            ) {\n                const execption = new Proxy(new response(), {\n                    get: (t, p) => {\n                        if (t[p]) {\n                            return t[p];\n                        } else { return controllerInstance[p]; }\n                    },\n                    set: (t, p, value) => {\n                        t[p] = value;\n                        return true;\n                    }\n                });\n                if (\n                    Dto &&\n                    Dto._base &&\n                    Dto._base() === PYIDto\n                ) {\n                    try {\n                        const data = await execption.throws();\n                        body = (new Dto(data));\n                    } catch (error) {\n                        body = (new Dto(body)).throws(error);\n                    }\n                } else {\n                    body = await execption.throws();\n                }\n            } else {\n                body = await response;\n            }\n            return await this.handleCallMethodResult(body, actionMetadata, action, interceptorFns);\n\n        }).catch(async (error) => {\n            if (\n                Dto &&\n                Dto._base &&\n                Dto._base() === PYIDto\n            ) {\n                const body = (new Dto({})).throws(error);\n                return await this.handleCallMethodResult(body, actionMetadata, action, interceptorFns);\n            } else {\n                return this.driver.handleError(error, actionMetadata, action);\n            }\n            // otherwise simply handle error without action execution\n            // return this.driver.handleError(error, actionMetadata, action);\n        });\n    }\n\n    /**\n     * Handles result of the action method execution.\n     */\n    protected handleCallMethodResult(\n        result: any, action: ActionMetadata,\n        options: Action, interceptorFns: Function[]\n    ): any {\n        if (isPromiseLike(result)) {\n            return result\n                .then((data: any) => {\n                    return this.handleCallMethodResult(data, action, options, interceptorFns);\n                })\n                .catch((error: any) => {\n                    return this.driver.handleError(error, action, options);\n                });\n        } else {\n\n            if (interceptorFns) {\n                const awaitPromise = runInSequence(interceptorFns, (interceptorFn) => {\n                    const interceptedResult = interceptorFn(options, result);\n                    if (isPromiseLike(interceptedResult)) {\n                        return interceptedResult.then((resultFromPromise: any) => {\n                            result = resultFromPromise;\n                        });\n                    } else {\n                        result = interceptedResult;\n                        return Promise.resolve();\n                    }\n                });\n\n                return awaitPromise\n                    .then(() => this.driver.handleSuccess(result, action, options))\n                    .catch((error) => this.driver.handleError(error, action, options));\n            } else {\n                return this.driver.handleSuccess(result, action, options);\n            }\n        }\n    }\n    /**\n     * Creates interceptors from the given 'use interceptors'.\n     */\n    protected prepareInterceptors(uses: InterceptorMetadata[]): Function[] {\n        return uses.map((use) => {\n            if (\n                use.interceptor.prototype &&\n                use.interceptor.prototype.intercept\n            ) { // if this is function instance of InterceptorInterface\n                return (action: Action, result: any) => {\n                    return (getFromContainer(use.interceptor) as InterceptorInterface).intercept(action, result);\n                };\n            }\n            return use.interceptor;\n        });\n    }\n}\n\n/**\n * Registers all loaded actions in your express application.\n */\nexport function createExecutor<T extends BaseDriver>(\n    driver: T,\n    options: RoutingControllersOptions = {}\n): void {\n\n    // import all controllers and middlewares and error handlers (new way)\n    let controllerClasses: Function[] = [];\n    if (options && options.controllers && options.controllers.length) {\n        controllerClasses = (options.controllers as any[]).filter((controller) => controller instanceof Function);\n        const controllerDirs = (options.controllers as any[]).filter((controller) => typeof controller === 'string');\n        controllerClasses.push(...importClassesFromDirectories(controllerDirs));\n    }\n    let middlewareClasses: Function[] = [];\n    if (options && options.middlewares && options.middlewares.length) {\n        middlewareClasses = (options.middlewares as any[]).filter((controller) => controller instanceof Function);\n        const middlewareDirs = (options.middlewares as any[]).filter((controller) => typeof controller === 'string');\n        middlewareClasses.push(...importClassesFromDirectories(middlewareDirs));\n    }\n    let interceptorClasses: Function[] = [];\n    if (options && options.interceptors && options.interceptors.length) {\n        interceptorClasses = (options.interceptors as any[]).filter((controller) => controller instanceof Function);\n        const interceptorDirs = (options.interceptors as any[]).filter((controller) => typeof controller === 'string');\n        interceptorClasses.push(...importClassesFromDirectories(interceptorDirs));\n    }\n\n    if (options && options.development !== undefined) {\n        driver.developmentMode = options.development;\n    } else {\n        driver.developmentMode = process.env.NODE_ENV !== 'production';\n    }\n\n    if (options.defaultErrorHandler !== undefined) {\n        driver.isDefaultErrorHandlingEnabled = options.defaultErrorHandler;\n    } else {\n        driver.isDefaultErrorHandlingEnabled = true;\n    }\n\n    if (options.classTransformer !== undefined) {\n        driver.useClassTransformer = options.classTransformer;\n    } else {\n        driver.useClassTransformer = true;\n    }\n\n    if (options.validation !== undefined) {\n        driver.enableValidation = !!options.validation;\n        if (options.validation instanceof Object) {\n            driver.validationOptions = options.validation as ValidationOptions;\n        }\n\n    } else {\n        driver.enableValidation = true;\n    }\n\n    driver.classToPlainTransformOptions = options.classToPlainTransformOptions as any;\n    driver.plainToClassTransformOptions = options.plainToClassTransformOptions as any;\n\n    if (options.errorOverridingMap !== undefined) {\n        driver.errorOverridingMap = options.errorOverridingMap;\n    }\n\n    if (options.routePrefix !== undefined) {\n        driver.routePrefix = options.routePrefix;\n    }\n\n    if (options.currentUserChecker !== undefined) {\n        driver.currentUserChecker = options.currentUserChecker;\n    }\n\n    if (options.authorizationChecker !== undefined) {\n        driver.authorizationChecker = options.authorizationChecker;\n    }\n\n    driver.cors = options.cors;\n\n    // next create a controller executor\n    new RoutingControllers(driver, options)\n        .initialize()\n        .registerInterceptors(interceptorClasses)\n        .registerMiddlewares('before', middlewareClasses)\n        .registerControllers(controllerClasses)\n        .registerMiddlewares('after', middlewareClasses); // todo: register only for loaded controllers?\n}\n"]}