{"version":3,"sources":["core/pyi.ts"],"names":[],"mappings":";;;AAUA,MAAsB,eAAe;CASpC;AATD,0CASC;AAmBD,MAAa,OAAO;IAKT,MAAM,CAAC,KAAK;QACf,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,MAAM,CAAC,KAAK;QACf,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,MAAM,CAAC,QAAQ;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,GAAG,KAAU;QAClC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACV,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;SACxB;QACD,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAKM,MAAM,CAAC,GAAG,KAAU;QACvB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,OAAO,CAAC,GAAG,KAAU;QACxB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC1D,iDAAiD;YACjD,MAAM,IAAI,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACnC,OAAO,MAAM,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAtCD,0BAsCC","file":"../../core/pyi.js","sourcesContent":["/**\n * 本框架设计为 制造者 -> 产品\n * 核心标准, 这里作为所有产品的基本属性\n * \n * This framework is designed as manufacturer - > Product\n * Core standard, which is the basic attribute of all products\n */\nexport type PYICoreClass<V extends PYICoreStandard> = (\n    new (...args: any[]) => V\n);\nexport abstract class PYICoreStandard {\n    [x: string]: any;\n    public static __proto__: any;\n\n    public static _root: PYICoreClass<any>;\n\n    public static _extends: PYICoreClass<any>;\n\n    public static _base: PYICoreClass<any>;\n}\n/**\n * 标准输入输出接口\n * 这里更具环境输出需要的配置和类\n * \n * is standard I / O interface .\n * is more environment _output your classes ro configuration .\n */\nexport interface PYIApp {\n    [x: string]: any;\n}\n\nexport interface PYICoreIO extends PYIApp {\n    mode: string;\n    path: string;\n    _input: (...props: any[]) => PYIApp | Promise<PYIApp>;\n    _output: () => PYIApp | Promise<PYIApp>;\n}\n\nexport class PYICore implements PYICoreIO {\n    [x: string]: any;\n    public static __proto__: any;\n    public static _i: PYICore;\n\n    public static _root(): PYIApp {\n        return PYICore;\n    }\n\n    public static _base(): PYIApp {\n        return PYICore;\n    }\n\n    public static _extends() {\n        return this.__proto__;\n    }\n\n    public static _singleton(...props: any) {\n        if (!this._i) {\n            this._i = new this();\n        }\n        return this._i;\n    }\n\n    public readonly mode!: string;\n    public readonly path!: string;\n\n    public _input(...props: any): PYIApp | Promise<PYIApp> {\n        return this;\n    }\n\n    public _output(...props: any): PYIApp | Promise<PYIApp> {\n        return Promise.resolve(this[this.mode]).then(async (action) => {\n            // tslint:disable-next-line: no-unused-expression\n            action && await action.apply(this);\n            return await this;\n        });\n    }\n}\n"]}