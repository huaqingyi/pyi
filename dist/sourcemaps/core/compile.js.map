{"version":3,"sources":["core/compile.ts"],"names":[],"mappings":";;AAAA,8CAAkH;AAClH,+CAA+C;AAE/C,mCAA6B;AAE7B,MAAa,OAAO;IAIhB,YAAY,KAA+B;QACvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,QAA0C;QAC/D,MAAM,QAAQ,GAAG,MAAM,sBAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC5B,OAAO,MAAM,QAAQ,CAAC;IAC1B,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,MAA2B;QACrD,MAAM,OAAO,CAAC,GAAG,CAAC,YAAG,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAS,EAAE,CAAS,EAAE,EAAE;YAC7D,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC;YAC7B,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;aAC7C;YACD,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;gBAAE,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC;aAAE;YACrD,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;gBAAE,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;aAAE;YACvD,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;gBAAE,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC;aAAE;YAErD,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,0BAAa,EAAE;gBAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAAE;YAC1E,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,2BAAc,EAAE;gBAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAAE;YAC5E,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,0BAAa,EAAE;gBAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAAE;YAC1E,OAAO,MAAM,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC,CAAC;QACJ,OAAO,MAAM,MAAM,CAAC;IACxB,CAAC;CACJ;AAjCD,0BAiCC","file":"../../core/compile.js","sourcesContent":["import { PYIApplication, PYIAppConfiguration, PYIController, PYIInterceptor, PYIMiddleware } from '../decorators';\nimport { PYIChokidar } from '../libs/chokidar';\nimport { PYIApp } from './pyi';\nimport { map } from 'lodash';\n\nexport class Compile {\n    private drive: PYIApplication;\n    private comps: PYIApp[];\n\n    constructor(drive: PYIApplication<any, any>) {\n        this.drive = drive;\n        this.comps = [];\n    }\n\n    public async scanProject(callback: (file: PYIApp | PYIApp[]) => any) {\n        const chokidar = await PYIChokidar.runtime(this.drive.mode, callback);\n        this.drive.config = chokidar.config;\n        this.comps = chokidar.comps;\n        return await chokidar;\n    }\n\n    public async configrationInit(config: PYIAppConfiguration) {\n        await Promise.all(map(this.comps, async (comp: any, i: number) => {\n            const { _base } = await comp;\n            if (comp) {\n                comp.prototype.logger = this.drive.logger;\n            }\n            if (!config.controllers) { config.controllers = []; }\n            if (!config.interceptors) { config.interceptors = []; }\n            if (!config.middlewares) { config.middlewares = []; }\n\n            if (_base && _base() === PYIController) { config.controllers.push(comp); }\n            if (_base && _base() === PYIInterceptor) { config.interceptors.push(comp); }\n            if (_base && _base() === PYIMiddleware) { config.middlewares.push(comp); }\n            return await comp;\n        }));\n        return await config;\n    }\n}\n"]}