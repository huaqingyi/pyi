{"version":3,"sources":["core/compile.ts"],"names":[],"mappings":"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","file":"../../core/compile.js","sourcesContent":["import {\n    PYIApplication, PYIAppConfiguration, PYIController,\n    PYIInterceptor, PYIMiddleware, AppSwaggerJSON, getMetadataArgsStorage,\n} from '../decorators';\nimport { PYIChokidar } from '../libs/chokidar';\nimport { PYIApp, PYICoreClass } from './pyi';\nimport { map, filter, find } from 'lodash';\nimport { PYIPlugin } from '../decorators/plugins';\nimport { FactoryComponent } from '../factory';\nimport { Swagger, tags, request, summary, security, description, body } from '../libs/swagger';\nimport { PYIServlet } from '../libs/jwt/jwt.auth.servlet';\n\nexport class Compile {\n    private drive: PYIApplication;\n    private comps: PYIApp[];\n\n    constructor(drive: PYIApplication<any, any>) {\n        this.drive = drive;\n        this.comps = [];\n    }\n\n    public async scanProject(callback: (file: PYIApp | PYIApp[]) => any) {\n        const chokidar = await PYIChokidar.runtime(this.drive.mode, callback);\n        this.drive.config = chokidar.config;\n        this.comps = chokidar.comps;\n        return await chokidar;\n    }\n\n    public async factoryComponent(factorys: FactoryComponent[]) {\n        const fs: FactoryComponent[] = [];\n        await Promise.all(map(factorys, async (factory) => {\n            if (find(factorys, (f) => f.target === factory.component)) {\n                await fs.push(factory);\n            } else {\n                await factory._output();\n            }\n            return factory;\n        }));\n        if (fs.length > 0) { await this.factoryComponent(fs); }\n        return await factorys;\n    }\n\n    public async configrationInit(config: PYIAppConfiguration) {\n        const factorys: FactoryComponent[] = [];\n        await Promise.all(map(this.comps, async (comp: any, i: number) => {\n            const { _base } = await comp;\n            if (comp && comp.prototype) {\n                comp.prototype.logger = this.drive.logger;\n            }\n            map(comp.prototype, (prototype) => {\n                if (prototype._base && prototype._base() === FactoryComponent) {\n                    prototype._input(comp);\n                    factorys.push(prototype);\n                }\n            });\n            if (!config.controllers) { config.controllers = []; }\n            if (!config.interceptors) { config.interceptors = []; }\n            if (!config.middlewares) { config.middlewares = []; }\n            if (!config.plugins) { config.plugins = []; }\n\n            if (_base && _base() === PYIController) {\n                const { jwt, docs } = config;\n                const path = docs && docs.path;\n                if (jwt !== false) {\n                    this.drive.use(async (ctx, next) => {\n                        if (ctx.request.url === path) {\n                            await next();\n                            return false;\n                        }\n                        const actions = filter(getMetadataArgsStorage().actions, (a: any) => {\n                            if (a.type.toLocaleUpperCase() === ctx.request.method.toLocaleUpperCase()) {\n                                return a.path.test(ctx.request.url);\n                            }\n                            return false;\n                        });\n\n                        // if (!actions || !actions.length) { return servlet.notFound(config.jwtSecretKey, ctx, next); }\n\n                        switch (actions.length) {\n                            case 0:\n                                return (new jwt()).notFound(config.jwtSecretKey, ctx, next);\n                            case 1:\n                                const servlet: PYIServlet = new Proxy(new jwt(), {\n                                    get(target, key: any) {\n                                        if (target[key]) { return target[key]; }\n                                        return (actions[0] as any).target.prototype[key];\n                                    },\n                                    set(target, key: any, value) {\n                                        return target[key] = (actions[0] as any).target.prototype[key] = value;\n                                    }\n                                });\n                                const action = (actions[0] as any).target.prototype[(actions[0] as any).method];\n                                return await servlet.use(action, config.jwtSecretKey, ctx, next);\n                            default:\n                                return await (new jwt()).multiple(actions as any, config.jwtSecretKey, ctx, next);\n                        }\n                    });\n                }\n                config.controllers.push(comp);\n            }\n            if (_base && _base() === PYIInterceptor) { config.interceptors.push(comp); }\n            if (_base && _base() === PYIMiddleware) { config.middlewares.push(comp); }\n            if (_base && _base() === PYIPlugin) { config.plugins.push(comp); }\n            return await comp;\n        }));\n\n        await this.factoryComponent(factorys);\n\n        config.plugins = config.plugins.sort(\n            (p1, p2) => {\n                const i1 = (p1.prototype.props || { priority: 0 }).priority || 0;\n                const i2 = (p2.prototype.props || { priority: 0 }).priority || 0;\n                return i2 - i1;\n            }\n        );\n        return await config;\n    }\n\n    public async installPlugins(plugins: Array<PYICoreClass<PYIPlugin>>) {\n        // tslint:disable-next-line:no-empty\n        const isPlugins: (plugins: PYICoreClass<PYIPlugin>) => any = this.drive.onPluginApplication || (() => { });\n\n        return Promise.all(map(plugins, async (plugin) => {\n            // tslint:disable-next-line:no-unused-expression\n            if (await isPlugins(plugin) !== false) {\n                const install = new plugin(this.drive);\n                await install.init();\n            }\n            return await plugin;\n        }));\n    }\n\n    public async useServletAction(config: AppSwaggerJSON | false) {\n        if (config !== false) {\n            const { controllers, actions } = getMetadataArgsStorage();\n\n            await Promise.all(map(actions, async (data) => {\n                const { target, method, route, type, docs } = data as any;\n\n                // tslint:disable-next-line:no-shadowed-variable\n                const control = find(controllers, (control) => control.target === target);\n                // tslint:disable-next-line:no-shadowed-variable\n                let path: string | RegExp = route;\n                if (control && control.route) {\n                    path = `/${control.route}/${route}`.split('//').join('/');\n                }\n\n                const tag = tags([target.name]);\n                tag(target, method, {\n                    value: { method: type, path }\n                });\n                // tslint:disable-next-line:no-unused-expression\n                request(type, path)(target, method, {\n                    value: { method: type, path }\n                });\n\n                if (docs.summary) {\n                    summary(docs.summary)(target, method, {\n                        value: { method: type, path }\n                    });\n                }\n                if (docs.security) {\n                    security(docs.security)(target, method, {\n                        value: { method: type, path }\n                    });\n                }\n                if (docs.description) {\n                    description(docs.description)(target, method, {\n                        value: { method: type, path }\n                    });\n                }\n                if (docs.swaggerDocument) {\n                    body(docs.swaggerDocument)(target, method, {\n                        value: { method: type, path }\n                    });\n                }\n                return await data;\n            }));\n            const swaggerConf: AppSwaggerJSON = config;\n            const path: string = swaggerConf.path;\n            delete swaggerConf.path;\n            return await Swagger.build(path, this.drive, swaggerConf);\n        }\n        return config;\n    }\n}\n"]}