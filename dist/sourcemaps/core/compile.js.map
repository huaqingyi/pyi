{"version":3,"sources":["core/compile.ts"],"names":[],"mappings":"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","file":"../../core/compile.js","sourcesContent":["import { PYIApplication, PYIAppConfiguration, PYIController, PYIInterceptor, PYIMiddleware } from '../decorators';\nimport { PYIChokidar } from '../libs/chokidar';\nimport { PYIApp, PYICoreClass } from './pyi';\nimport { map, find } from 'lodash';\nimport { PYIPlugin } from '../decorators/plugins';\nimport { FactoryComponent } from '../factory';\n\nexport class Compile {\n    private drive: PYIApplication;\n    private comps: PYIApp[];\n\n    constructor(drive: PYIApplication<any, any>) {\n        this.drive = drive;\n        this.comps = [];\n    }\n\n    public async scanProject(callback: (file: PYIApp | PYIApp[]) => any) {\n        const chokidar = await PYIChokidar.runtime(this.drive.mode, callback);\n        this.drive.config = chokidar.config;\n        this.comps = chokidar.comps;\n        return await chokidar;\n    }\n\n    public async factoryComponent(factorys: FactoryComponent[]) {\n        const fs: FactoryComponent[] = [];\n        await Promise.all(map(factorys, async (factory) => {\n            if (find(factorys, (f) => f.target === factory.component)) {\n                await fs.push(factory);\n            } else {\n                await factory._output();\n            }\n            return factory;\n        }));\n        if (fs.length > 0) { await this.factoryComponent(fs); }\n        return await factorys;\n    }\n\n    public async configrationInit(config: PYIAppConfiguration) {\n        const factorys: FactoryComponent[] = [];\n        await Promise.all(map(this.comps, async (comp: any, i: number) => {\n            const { _base } = await comp;\n            if (comp && comp.prototype) {\n                comp.prototype.logger = this.drive.logger;\n            }\n            map(comp.prototype, (prototype) => {\n                if (prototype._base && prototype._base() === FactoryComponent) {\n                    prototype._input(comp);\n                    factorys.push(prototype);\n                }\n            });\n            if (!config.controllers) { config.controllers = []; }\n            if (!config.interceptors) { config.interceptors = []; }\n            if (!config.middlewares) { config.middlewares = []; }\n            if (!config.plugins) { config.plugins = []; }\n\n            if (_base && _base() === PYIController) { config.controllers.push(comp); }\n            if (_base && _base() === PYIInterceptor) { config.interceptors.push(comp); }\n            if (_base && _base() === PYIMiddleware) { config.middlewares.push(comp); }\n            if (_base && _base() === PYIPlugin) { config.plugins.push(comp); }\n            return await comp;\n        }));\n\n        await this.factoryComponent(factorys);\n\n        config.plugins = config.plugins.sort(\n            (p1, p2) => {\n                const i1 = (p1.prototype.props || { priority: 0 }).priority || 0;\n                const i2 = (p2.prototype.props || { priority: 0 }).priority || 0;\n                return i2 - i1;\n            }\n        );\n        return await config;\n    }\n\n    public async installPlugins(plugins: Array<PYICoreClass<PYIPlugin>>) {\n        // tslint:disable-next-line:no-empty\n        const isPlugins: (plugins: PYICoreClass<PYIPlugin>) => any = this.drive.onPluginApplication || (() => { });\n\n        return Promise.all(map(plugins, async (plugin) => {\n            // tslint:disable-next-line:no-unused-expression\n            if (await isPlugins(plugin) !== false) {\n                const install = new plugin(this.drive);\n                await install.init();\n            }\n            return await plugin;\n        }));\n    }\n}\n"]}